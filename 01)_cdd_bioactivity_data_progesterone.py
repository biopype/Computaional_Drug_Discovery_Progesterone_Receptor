# -*- coding: utf-8 -*-
"""CDD_Bioactivity_Data_Progesterone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/176zcNHPBTSNjnOrvy3H2GiQIwBUjd-6N

# **Computational Drug Discovery: Assessing Descriptor Performance and Machine Learning Models for Progesterone Receptor - Part 1**

Downloading Bioactivity Data

**Muhammad Abdur Rehman**

Original code by: **Chanin Nantasenamat**

[*'Data Professor' YouTube channel*](http://youtube.com/dataprofessor)

## **ChEMBL Database**

The [*ChEMBL Database*](https://www.ebi.ac.uk/chembl/) is a database that contains curated bioactivity data of more than 2.4 million compounds. It is compiled from more than 89,000 documents, 1.6 million assays and the data spans 15,000 targets and 2,000 cells and 48,000 indications.
[Data as of September 13, 2024; ChEMBL version 34].

## **Installing libraries**

Install the ChEMBL web service package so that we can retrieve bioactivity data from the ChEMBL Database.
"""

! pip install chembl_webresource_client

"""## **Importing libraries**"""

# Import necessary libraries
import pandas as pd
from chembl_webresource_client.new_client import new_client

"""## **Search for Target protein**

### **Target search for Progesterone**
"""

# Target search for progesterone
target = new_client.target
target_query = target.search('progesterone')
targets = pd.DataFrame.from_dict(target_query)
targets

"""### **Select and retrieve bioactivity data for single-protein *Progesterone* (first entry)**

We will assign the first entry (which corresponds to the target protein, *Human Progesterone*) to the ***selected_target*** variable
"""

selected_target = targets.target_chembl_id[0]
selected_target

"""Here, we will retrieve only bioactivity data for *Human Progesterone* (CHEMBL208) that are reported as pChEMBL values."""

activity = new_client.activity
res = activity.filter(target_chembl_id=selected_target).filter(standard_type="IC50")

df = pd.DataFrame.from_dict(res)

df

"""Finally we will save the resulting bioactivity data to a CSV file **bioactivity_data.csv**."""

df.to_csv('progesterone_01_bioactivity_data_raw.csv', index=False)

"""## **Handling missing data**
If any compounds has missing value for the **standard_value** and **canonical_smiles** column then drop it.
"""

df2 = df[df.standard_value.notna()]
df2 = df2[df.canonical_smiles.notna()]
df2

len(df2.canonical_smiles.unique())

df2_nr = df2.drop_duplicates(['canonical_smiles'])
df2_nr

"""## **Data pre-processing of the bioactivity data**

### **Combine the 3 columns (molecule_chembl_id,canonical_smiles,standard_value) and bioactivity_class into a DataFrame**
"""

selection = ['molecule_chembl_id','canonical_smiles','standard_value']
df3 = df2_nr[selection]
df3

"""Saves dataframe to CSV file"""

df3.to_csv('progesterone_02_bioactivity_data_preprocessed.csv', index=False)

"""### **Labeling compounds as either being active, inactive or intermediate**
The bioactivity data is in the IC50 unit. Compounds having values of less than 1000 nM will be considered to be **active** while those greater than 10,000 nM will be considered to be **inactive**. As for those values in between 1,000 and 10,000 nM will be referred to as **intermediate**.
"""

df4 = pd.read_csv('progesterone_02_bioactivity_data_preprocessed.csv')

bioactivity_threshold = []
for i in df4.standard_value:
  if float(i) >= 10000:
    bioactivity_threshold.append("inactive")
  elif float(i) <= 1000:
    bioactivity_threshold.append("active")
  else:
    bioactivity_threshold.append("intermediate")

bioactivity_class = pd.Series(bioactivity_threshold, name='class')
df5 = pd.concat([df4, bioactivity_class], axis=1)
df5

"""Saves dataframe to CSV file"""

df5.to_csv('progesterone_03_bioactivity_data_curated.csv', index=False)

! zip progesterone.zip *.csv

! ls -l

"""---"""
